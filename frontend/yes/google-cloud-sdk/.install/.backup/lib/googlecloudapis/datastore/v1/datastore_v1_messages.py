"""Generated message classes for datastore version v1.

The Google Cloud Datastore API defines an application interface to interact
with the datastore
"""
# NOTE: This file is autogenerated and should not be edited by hand.

from protorpc import messages as _messages

from googlecloudapis.apitools.base.py import encoding


package = 'datastore'


class DatastoreProjectsExportRequest(_messages.Message):
  """A DatastoreProjectsExportRequest object.

  Fields:
    exportRequest: A ExportRequest resource to be passed as the request body.
    projectId: Project ID against which to make the request. Not required if
      the request is made over HTTP.
  """

  exportRequest = _messages.MessageField('ExportRequest', 1)
  projectId = _messages.StringField(2, required=True)


class DatastoreProjectsImportRequest(_messages.Message):
  """A DatastoreProjectsImportRequest object.

  Fields:
    importRequest: A ImportRequest resource to be passed as the request body.
    projectId: Project ID against which to make the request. Not required if
      the request is made over HTTP.
  """

  importRequest = _messages.MessageField('ImportRequest', 1)
  projectId = _messages.StringField(2, required=True)


class DatastoreProjectsOperationsCancelRequest(_messages.Message):
  """A DatastoreProjectsOperationsCancelRequest object.

  Fields:
    name: The name of the operation resource to be cancelled.
  """

  name = _messages.StringField(1, required=True)


class DatastoreProjectsOperationsDeleteRequest(_messages.Message):
  """A DatastoreProjectsOperationsDeleteRequest object.

  Fields:
    name: The name of the operation resource to be deleted.
  """

  name = _messages.StringField(1, required=True)


class DatastoreProjectsOperationsGetRequest(_messages.Message):
  """A DatastoreProjectsOperationsGetRequest object.

  Fields:
    name: The name of the operation resource.
  """

  name = _messages.StringField(1, required=True)


class DatastoreProjectsOperationsListRequest(_messages.Message):
  """A DatastoreProjectsOperationsListRequest object.

  Fields:
    filter: The standard List filter.
    name: The name of the operation collection.
    pageSize: The standard List page size.
    pageToken: The standard List page token.
  """

  filter = _messages.StringField(1)
  name = _messages.StringField(2, required=True)
  pageSize = _messages.IntegerField(3, variant=_messages.Variant.INT32)
  pageToken = _messages.StringField(4)


class Empty(_messages.Message):
  """A generic empty message that you can re-use to avoid defining duplicated
  empty messages in your APIs. A typical example is to use it as the request
  or the response type of an API method. For instance:      service Foo {
  rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);     }  The
  JSON representation for `Empty` is empty JSON object `{}`.
  """



class EntityFilter(_messages.Message):
  """Identifies a subset of Entities in a Dataset.  This is specified as
  combinations of Kind + Namespace (either or both of which may be all as
  described in the following examples). Example usage:  Entire Dataset:
  kinds=[], namespace_ids=[]  Kinds Foo and Bar in all Namespaces:
  kinds=['Foo', 'Bar'], namespace_ids=[]  Kinds Foo and Bar only in the
  Default Namespace:   kinds=['Foo', 'Bar'], namespace_ids=['']  Kinds Foo and
  Bar in both the Default and Baz Namespaces:   kinds=['Foo', 'Bar'],
  namespace_ids=['', 'Baz']  The entire Baz Namespace:   kinds=[],
  namespace_ids=['Baz']

  Fields:
    kinds: If empty, then this represents all Kinds.
    namespaceIds: An empty list represents all Namespaces.  This is the
      preferred usage for Projects that don't use Namespaces.  An empty string
      element represents the Default Namespace.  This should be used if the
      Project has data in non-Default Namespaces, but doesn't want to include
      them.
  """

  kinds = _messages.StringField(1, repeated=True)
  namespaceIds = _messages.StringField(2, repeated=True)


class ExportRequest(_messages.Message):
  """The request for [google.datastore.v1.DatastoreAdmin.Export][google.datast
  ore.v1.DatastoreAdmin.Export].

  Messages:
    LabelsValue: Client-assigned labels.

  Fields:
    destination: Location for the export metadata and data files.  Specified
      as the full resource name of the external storage location. Currently,
      only Google Cloud Storage is supported.  So the destination should be of
      the form: storage.googleapis.com/buckets/bucket-name or
      storage.googleapis.com/buckets/bucket-name/objects/object-path.  The
      resulting files will be nested deeper than the specified destination.
      The final data location will be provided in the [google.datastore.v1.Exp
      ortResponse.data_location][google.datastore.v1.ExportResponse.data_locat
      ion] field.  That value should be used for subsequent Import Operations.
      By nesting the data files deeper, the same destination can be used in
      multiple Export Operations without conflict.
    entityFilter: Description of what data from the Dataset is included in the
      export.
    labels: Client-assigned labels.
  """

  @encoding.MapUnrecognizedFields('additionalProperties')
  class LabelsValue(_messages.Message):
    """Client-assigned labels.

    Messages:
      AdditionalProperty: An additional property for a LabelsValue object.

    Fields:
      additionalProperties: Additional properties of type LabelsValue
    """

    class AdditionalProperty(_messages.Message):
      """An additional property for a LabelsValue object.

      Fields:
        key: Name of the additional property.
        value: A string attribute.
      """

      key = _messages.StringField(1)
      value = _messages.StringField(2)

    additionalProperties = _messages.MessageField('AdditionalProperty', 1, repeated=True)

  destination = _messages.StringField(1)
  entityFilter = _messages.MessageField('EntityFilter', 2)
  labels = _messages.MessageField('LabelsValue', 3)


class ImportRequest(_messages.Message):
  """The request for [google.datastore.v1.DatastoreAdmin.Import][google.datast
  ore.v1.DatastoreAdmin.Import].

  Messages:
    LabelsValue: Client-assigned labels.

  Fields:
    dataLocation: The full resource name of the external storage location.
      Currently, only Google Cloud Storage is supported.  So the data_location
      should be of the form: storage.googleapis.com/buckets/bucket-
      name/objects/object-path.  See [google.datastore.v1.ExportResponse.data_
      location][google.datastore.v1.ExportResponse.data_location]
    entityFilter: Optionally specify which Kinds/Namespaces are to be
      imported. If provided, the list must be a subset of the EntityFilter
      used in creating the export, otherwise a FAILED_PRECONDITION error will
      be returned. If no filter is specified then all Entities from the export
      are imported.
    labels: Client-assigned labels.
  """

  @encoding.MapUnrecognizedFields('additionalProperties')
  class LabelsValue(_messages.Message):
    """Client-assigned labels.

    Messages:
      AdditionalProperty: An additional property for a LabelsValue object.

    Fields:
      additionalProperties: Additional properties of type LabelsValue
    """

    class AdditionalProperty(_messages.Message):
      """An additional property for a LabelsValue object.

      Fields:
        key: Name of the additional property.
        value: A string attribute.
      """

      key = _messages.StringField(1)
      value = _messages.StringField(2)

    additionalProperties = _messages.MessageField('AdditionalProperty', 1, repeated=True)

  dataLocation = _messages.StringField(1)
  entityFilter = _messages.MessageField('EntityFilter', 2)
  labels = _messages.MessageField('LabelsValue', 3)


class ListOperationsResponse(_messages.Message):
  """The response message for
  [Operations.ListOperations][google.longrunning.Operations.ListOperations].

  Fields:
    nextPageToken: The standard List next-page token.
    operations: A list of operations that match the specified filter in the
      request.
  """

  nextPageToken = _messages.StringField(1)
  operations = _messages.MessageField('Operation', 2, repeated=True)


class Operation(_messages.Message):
  """This resource represents a long-running operation that is the result of a
  network API call.

  Messages:
    MetadataValue: Some service-specific metadata associated with the
      operation.  It typically contains progress information and common
      metadata such as create time. Some services may not provide such
      metadata.  Any method that returns a long-running operation should
      document the metadata type, if any.
    ResponseValue: The normal response of the operation in case of success.
      If the original method returns no data on success, such as `Delete`, the
      response will be `google.protobuf.Empty`.  If the original method is
      standard `Get`/`Create`/`Update`, the response should be the resource.
      For other methods, the response should have the type `XxxResponse`,
      where `Xxx` is the original method name.  For example, if the original
      method name is `TakeSnapshot()`, the inferred response type will be
      `TakeSnapshotResponse`.

  Fields:
    done: If the value is false, it means the operation is still in progress.
      If true, the operation is completed and the `result` is available.
    error: The error result of the operation in case of failure.
    metadata: Some service-specific metadata associated with the operation.
      It typically contains progress information and common metadata such as
      create time. Some services may not provide such metadata.  Any method
      that returns a long-running operation should document the metadata type,
      if any.
    name: The server-assigned name, which is only unique within the same
      service that originally returns it. If you use the default HTTP mapping
      above, the `name` should have the format of
      "operations/some/unique/name".
    response: The normal response of the operation in case of success.  If the
      original method returns no data on success, such as `Delete`, the
      response will be `google.protobuf.Empty`.  If the original method is
      standard `Get`/`Create`/`Update`, the response should be the resource.
      For other methods, the response should have the type `XxxResponse`,
      where `Xxx` is the original method name.  For example, if the original
      method name is `TakeSnapshot()`, the inferred response type will be
      `TakeSnapshotResponse`.
  """

  @encoding.MapUnrecognizedFields('additionalProperties')
  class MetadataValue(_messages.Message):
    """Some service-specific metadata associated with the operation.  It
    typically contains progress information and common metadata such as create
    time. Some services may not provide such metadata.  Any method that
    returns a long-running operation should document the metadata type, if
    any.

    Messages:
      AdditionalProperty: An additional property for a MetadataValue object.

    Fields:
      additionalProperties: Properties of the object. Contains field @ype with
        type URL.
    """

    class AdditionalProperty(_messages.Message):
      """An additional property for a MetadataValue object.

      Fields:
        key: Name of the additional property.
        value: A extra_types.JsonValue attribute.
      """

      key = _messages.StringField(1)
      value = _messages.MessageField('extra_types.JsonValue', 2)

    additionalProperties = _messages.MessageField('AdditionalProperty', 1, repeated=True)

  @encoding.MapUnrecognizedFields('additionalProperties')
  class ResponseValue(_messages.Message):
    """The normal response of the operation in case of success.  If the
    original method returns no data on success, such as `Delete`, the response
    will be `google.protobuf.Empty`.  If the original method is standard
    `Get`/`Create`/`Update`, the response should be the resource.  For other
    methods, the response should have the type `XxxResponse`, where `Xxx` is
    the original method name.  For example, if the original method name is
    `TakeSnapshot()`, the inferred response type will be
    `TakeSnapshotResponse`.

    Messages:
      AdditionalProperty: An additional property for a ResponseValue object.

    Fields:
      additionalProperties: Properties of the object. Contains field @ype with
        type URL.
    """

    class AdditionalProperty(_messages.Message):
      """An additional property for a ResponseValue object.

      Fields:
        key: Name of the additional property.
        value: A extra_types.JsonValue attribute.
      """

      key = _messages.StringField(1)
      value = _messages.MessageField('extra_types.JsonValue', 2)

    additionalProperties = _messages.MessageField('AdditionalProperty', 1, repeated=True)

  done = _messages.BooleanField(1)
  error = _messages.MessageField('Status', 2)
  metadata = _messages.MessageField('MetadataValue', 3)
  name = _messages.StringField(4)
  response = _messages.MessageField('ResponseValue', 5)


class StandardQueryParameters(_messages.Message):
  """Query parameters accepted by all methods.

  Enums:
    FXgafvValueValuesEnum: V1 error format.
    AltValueValuesEnum: Data format for response.

  Fields:
    f__xgafv: V1 error format.
    access_token: OAuth access token.
    alt: Data format for response.
    bearer_token: OAuth bearer token.
    callback: JSONP
    fields: Selector specifying which fields to include in a partial response.
    key: API key. Your API key identifies your project and provides you with
      API access, quota, and reports. Required unless you provide an OAuth 2.0
      token.
    oauth_token: OAuth 2.0 token for the current user.
    pp: Pretty-print response.
    prettyPrint: Returns response with indentations and line breaks.
    quotaUser: Available to use for quota purposes for server-side
      applications. Can be any arbitrary string assigned to a user, but should
      not exceed 40 characters.
    trace: A tracing token of the form "token:<tokenid>" or "email:<ldap>" to
      include in api requests.
    uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
    upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
  """

  class AltValueValuesEnum(_messages.Enum):
    """Data format for response.

    Values:
      json: Responses with Content-Type of application/json
      media: Media download with context-dependent Content-Type
      proto: Responses with Content-Type of application/x-protobuf
    """
    json = 0
    media = 1
    proto = 2

  class FXgafvValueValuesEnum(_messages.Enum):
    """V1 error format.

    Values:
      _1: v1 error format
      _2: v2 error format
    """
    _1 = 0
    _2 = 1

  f__xgafv = _messages.EnumField('FXgafvValueValuesEnum', 1)
  access_token = _messages.StringField(2)
  alt = _messages.EnumField('AltValueValuesEnum', 3, default=u'json')
  bearer_token = _messages.StringField(4)
  callback = _messages.StringField(5)
  fields = _messages.StringField(6)
  key = _messages.StringField(7)
  oauth_token = _messages.StringField(8)
  pp = _messages.BooleanField(9, default=True)
  prettyPrint = _messages.BooleanField(10, default=True)
  quotaUser = _messages.StringField(11)
  trace = _messages.StringField(12)
  uploadType = _messages.StringField(13)
  upload_protocol = _messages.StringField(14)


class Status(_messages.Message):
  """The `Status` defines a logical error model that is suitable for different
  programming environments, including REST APIs and RPC APIs. It is used by
  [gRPC](https://github.com/grpc). The error model is designed to be:  -
  Simple to use and understand for most users. - Flexible enough to meet
  unexpected needs.  # Overview The `Status` message contains 3 pieces of
  data: error code, error message, and error details. The error code should be
  an enum value of [google.rpc.Code][], but it may accept additional error
  codes if needed.  The error message should be a developer-facing English
  message that helps developers *understand* and *resolve* the error. If a
  localized user-facing error message is needed, it can be sent in the error
  details or localized by the client. The optional error details may contain
  arbitrary information about the error. There is a predefined set of error
  detail types in the package `google.rpc` which can be used for common error
  conditions.  # Language mapping The `Status` message is the logical
  representation of the error model, but it is not necessarily the actual wire
  format. When the `Status` message is exposed in different client libraries
  and different wire protocols, it can be mapped differently. For example, it
  will likely be mapped to some exceptions in Java, but more likely mapped to
  some error codes in C.  # Other uses The error model and the `Status`
  message can be used in a variety of environments - either with or without
  APIs - to provide consistent developer experience across different
  environments.  Example uses of this error model include:  - Partial errors.
  If a service needs to return partial errors to the client,     it may embed
  the `Status` in the normal response to indicate the partial     errors.  -
  Workflow errors. A typical workflow has multiple steps. Each step may
  have a `Status` message for error reporting purpose.  - Batch operations. If
  a client uses batch request and batch response, the     `Status` message
  should be used directly inside batch response, one for     each error sub-
  response.  - Asynchronous operations. If an API call embeds asynchronous
  operation     results in its response, the status of those operations should
  be     represented directly using the `Status` message.  - Logging. If some
  API errors are stored in logs, the message `Status` could     be used
  directly after any stripping needed for security/privacy reasons.

  Messages:
    DetailsValueListEntry: A DetailsValueListEntry object.

  Fields:
    code: The status code, which should be an enum value of
      [google.rpc.Code][].
    details: A list of messages that carry the error details.  There will be a
      common set of message types for APIs to use.
    message: A developer-facing error message, which should be in English. Any
      user-facing error message should be localized and sent in the
      [google.rpc.Status.details][google.rpc.Status.details] field, or
      localized by the client.
  """

  @encoding.MapUnrecognizedFields('additionalProperties')
  class DetailsValueListEntry(_messages.Message):
    """A DetailsValueListEntry object.

    Messages:
      AdditionalProperty: An additional property for a DetailsValueListEntry
        object.

    Fields:
      additionalProperties: Properties of the object. Contains field @ype with
        type URL.
    """

    class AdditionalProperty(_messages.Message):
      """An additional property for a DetailsValueListEntry object.

      Fields:
        key: Name of the additional property.
        value: A extra_types.JsonValue attribute.
      """

      key = _messages.StringField(1)
      value = _messages.MessageField('extra_types.JsonValue', 2)

    additionalProperties = _messages.MessageField('AdditionalProperty', 1, repeated=True)

  code = _messages.IntegerField(1, variant=_messages.Variant.INT32)
  details = _messages.MessageField('DetailsValueListEntry', 2, repeated=True)
  message = _messages.StringField(3)


encoding.AddCustomJsonEnumMapping(
    StandardQueryParameters.FXgafvValueValuesEnum, '_1', '1',
    package=u'datastore')
encoding.AddCustomJsonEnumMapping(
    StandardQueryParameters.FXgafvValueValuesEnum, '_2', '2',
    package=u'datastore')
encoding.AddCustomJsonFieldMapping(
    StandardQueryParameters, 'f__xgafv', '$.xgafv',
    package=u'datastore')
